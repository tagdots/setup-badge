---

name: CD-staging

on:  # yamllint disable-line rule:truthy

  pull_request:

    branches:
      - main

    types:
      - closed

env:
  PACKAGE_NAME: setup-badge
  PYTHON_VERSION: '3.12.x'

permissions:
  contents: read

jobs:

  push-git-tag:
    if: ${{ startsWith(github.head_ref, 'release/') && github.event.pull_request.merged == true }}

    runs-on: ubuntu-latest

    env:
      GITHUB_HEAD_REF: ${{ github.head_ref }}

    permissions:
      contents: write

    outputs:
      VERSION: ${{ steps.set-tag.outputs.VERSION }}

    steps:

    - name: Generate a token from Github App
      # instead of PAT, github_app_id and github_app_pem_file are used by this workflow because
      # we have tag-based ruleset in place to restrict ACTOR from bypassing tag protection.
      id: generate-token
      uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
      with:
        app-id: ${{ secrets.SECRET_GITHUB_APP_ID }}
        private-key: ${{ secrets.SECRET_GITHUB_APP_PEM_FILE }}

    - name: Checkout source code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        token: ${{ steps.generate-token.outputs.token }}

    - id: set-tag
      shell: bash
      env:
        GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      run: |
        # parse out the version
        GITHUB_SPEC_VER=${GITHUB_HEAD_REF#release/}
        echo "VERSION=${GITHUB_SPEC_VER}" >> "$GITHUB_OUTPUT"

        # create and push a lightweight tag
        git tag ${GITHUB_SPEC_VER}
        git push origin ${GITHUB_SPEC_VER}

  publish-TestPyPI:

    needs: [push-git-tag]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout source code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - shell: bash
      run: |
        # install dependencies and build
        make test-install
        make build

    # https://github.com/marketplace/actions/pypi-publish
    - name: Publish package distributions to TestPyPI
      uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
      with:
        attestations: false
        packages-dir: dist/
        password: ${{ secrets.SECRET_PYPITEST }}
        print-hash: true
        repository-url: https://test.pypi.org/legacy/
        verbose: true
        verify-metadata: true

  validate-TestPyPI:

    needs: [publish-TestPyPI]

    runs-on: ubuntu-latest

    steps:

    - name: Validate after short wait to ensure publish is complete
      shell: bash
      run: sleep 15

    - name: Checkout source code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - shell: bash
      env:
        INDEX_URL: "https://test.pypi.org/simple/"
        EXTRA_INDEX_URL: "https://pypi.org/simple/"
      run: |
        # install package from TestPyPI and run app to show version
        pip install ${{ env.PACKAGE_NAME }} --index-url ${{ env.INDEX_URL }} --extra-index-url ${{ env.EXTRA_INDEX_URL }}
        ${{ env.PACKAGE_NAME }} --version

  notify-slack:
    if: always()
    needs: [push-git-tag, publish-TestPyPI, validate-TestPyPI]

    runs-on: ubuntu-latest

    outputs:
      WORKFLOW_RESULT: ${{ steps.get-previous-jobs-results.outputs.WORKFLOW_RESULT }}
      TAG_NAME: ${{ steps.get-previous-jobs-results.outputs.TAG_NAME }}

    steps:

    - name: Get Overall Jobs Results
      id: get-overall-jobs-results
      shell: bash
      run: |
        # get overall result from all of the previous jobs
        if "${{ needs.push-git-tag.result == 'success' && needs.publish-TestPyPI.result == 'success' && needs.validate-TestPyPI.result == 'success' }}"; then
          echo "WORKFLOW_RESULT=:white_check_mark:" >> "$GITHUB_OUTPUT"
        elif "${{ needs.push-git-tag.result == 'skipped' && needs.publish-TestPyPI.result == 'skipped' && needs.validate-TestPyPI.result == 'skipped' }}"; then
          echo "WORKFLOW_RESULT=:fast_forward:" >> "$GITHUB_OUTPUT"
        else
          echo "WORKFLOW_RESULT=:no_entry:" >> "$GITHUB_OUTPUT"
        fi

        # get tag name
        if ${{ needs.push-git-tag.outputs.VERSION == '' }}; then
          echo "TAG_NAME=not-available" >> "$GITHUB_OUTPUT"
        else
          echo "TAG_NAME=${{ needs.push-git-tag.outputs.VERSION }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Post message to Slack
      uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
      with:
        method: chat.postMessage
        token: "${{ secrets.SECRET_SLACK_APP_GITHUB_BOT }}"
        payload: |
          channel: "${{ secrets.SECRET_SLACK_CHANNEL_CICD }}"
          text: "
              *Repository: ${{ github.repository }}*\n
              *Workflow : ${{ github.workflow }} ${{ steps.get-overall-jobs-results.outputs.WORKFLOW_RESULT }}*\n
              *Tag Name : ${{ steps.get-overall-jobs-results.outputs.TAG_NAME }}*
              ```
              URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n
              Job: push-git-tag      - ${{ needs.push-git-tag.result }}\n
              Job: publish-TestPyPI  - ${{ needs.publish-TestPyPI.result }}\n
              Job: validate-TestPyPI - ${{ needs.validate-TestPyPI.result }}
              ```"
